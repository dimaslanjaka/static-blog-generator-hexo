name: Test And Deploy

on:
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.tgz'
      - '**/*.gz'
      - '**/release/**'
      - '.github/codeql/*'
      - '**codeql**'
  pull_request:
    types:
      - closed
    paths-ignore:
      - '**/release/**'
      - '**/*.tgz'
      - '**/*.gz'
      - '**/test*/**'
  workflow_dispatch:

concurrency:
  group: build-${{ github.event.push.number || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    env:
      NODE_OPTIONS: "--max_old_space_size=8192" #8192 4096 --expose-gc

    steps:
      - uses: szenius/set-timezone@v1.1
        with:
          timezoneLinux: "Asia/Jakarta"
          timezoneMacos: "Asia/Jakarta"
          timezoneWindows: "Western Indonesia Time"
      - uses: actions/checkout@v3
        with:
          submodules: recursive
          token: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          check-latest: true
          architecture: 'x64' # optional, x64 or x86. If not specified, x64 will be used by default

      - name: Set env
        id: set-env
        shell: bash
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "GITHUB_COMMIT_URL=https://github.com/${{github.repository}}/commit/$(echo $GITHUB_SHA)" >> $GITHUB_ENV
          echo "GITHUB_RUNNER_URL=https://github.com/${{github.repository}}/commit/${{github.sha}}/checks/${{github.run_id}}" >> $GITHUB_ENV
          echo "CACHE_NPM=$(npm config get cache)" >> $GITHUB_ENV
          echo "CACHE_YARN=$(yarn cache dir)" >> $GITHUB_ENV
          echo "CACHE_YARN2=$(yarn config get cacheFolder)" >> $GITHUB_ENV
          echo "cache-npm=$(npm config get cache)" >> $GITHUB_OUTPUT
          echo "cache-yarn=$(yarn cache dir)" >> $GITHUB_OUTPUT
          echo "cache-yarn2=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
      - name: Get env
        run: |
          echo "branch      : ${{ env.GITHUB_BRANCH }}"
          echo "commit msg  : ${{ github.event.head_commit.message }}"
          echo "commit hash : ${{ env.GITHUB_SHA_SHORT }}"
          echo "commit url  : ${{ env.GITHUB_COMMIT_URL }}"
          echo "runner url  : ${{ env.GITHUB_RUNNER_URL }}"
          echo "cache npm   : ${{ env.CACHE_NPM }}"
          echo "cache yarn  : ${{ env.CACHE_YARN }}"
          echo "cache yarn2 : ${{ env.CACHE_YARN2 }}"
      - name: Set EOL git configs
        continue-on-error: true
        run: |
          git config core.eol lf
          git config core.autocrlf input
          git checkout-index --force --all
      - name: Git setup user email
        if: matrix.node-version == '18.x' && matrix.architecture == 'x64' && runner.os == 'Linux' && steps.changes.outputs.files_changed == 'true'
        continue-on-error: true
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Update submodules
        run: |
          git config --global init.defaultBranch master
          git submodule update -i -r
          git submodule foreach git submodule update -i -r

      - uses: pat-s/always-upload-cache@v3.0.11
        id: cache
        with:
          path: |
            ${{ steps.set-env.outputs.cache-npm }}
            ${{ steps.set-env.outputs.cache-yarn }}
            ${{ steps.set-env.outputs.cache-yarn2 }}
            ./db.json
            ./public
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-

      - name: Fix Sharp
        if: ${{ false }}
        continue-on-error: true
        run: |
          git clone https://github.com/jcupitt/libvips.git
          cd libvips/
          # install dependencies if you have errors during autogen.sh
          sudo apt install gtk-doc-tools
          sudo apt install gobject-introspection
          ./autogen.sh
          make
          sudo make install
          sudo apt-get update
          sudo apt-get --only-upgrade install libvips

      - name: Install Global Packages
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm i -g typescript ts-node gulp-cli hexo-cli webpack-cli rimraf npm-run-all npm-check-updates --location=global

      - name: Install dependencies
        id: install-npm
        shell: bash
        run: |
          npm run update

      - run: gulp pull
      - run: gulp post:standalone
      - run: gulp post:copy
      - run: hexo generate
      - run: gulp sitemap
      - run: gulp feed
      - run: gulp deploy:copy
      - run: gulp seo
      - run: gulp safelink
      - name: Git push
        continue-on-error: true
        working-directory: .deploy_git
        run: |
          git submodule foreach "git add . | :"
          git submodule foreach "git commit -m 'Update build from ${{ env.GITHUB_COMMIT_URL }}' | :"
          git add .
          git commit -m "Update build from ${{ env.GITHUB_COMMIT_URL }}" -m "commit hash: ${{ env.GITHUB_SHA_SHORT }}" -m "commit url: ${{ env.GITHUB_COMMIT_URL }}" -m "runner: ${{ env.GITHUB_RUNNER_URL }}"
          git push

      - name: Deploy ðŸš€
        #if: matrix.os == 'ubuntu-latest' && matrix.node == 16
        if: ${{ false }}
        #if: steps.hexo-validate.outcome == 'success' && steps.hexo-validate.conclusion == 'success'
        uses: JamesIves/github-pages-deploy-action@v4.4.1
        with:
          branch: master # The branch the action should deploy to.
          folder: .deploy_git # The folder the action should deploy.
          force: false # merge instead push --force, (keep old / non modified) files?
          token: "${{ secrets.GITHUB_TOKEN }}" # github token
          repository-name: "dimaslanjaka/dimaslanjaka.github.io" # Repostory URL
